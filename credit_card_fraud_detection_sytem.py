# -*- coding: utf-8 -*-
"""Credit Card Fraud Detection Sytem

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aTtU2Mv8kPbYv0J3GeQI8czjQTOo_ZQY
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report,confusion_matrix,roc_auc_score,RocCurveDisplay
from imblearn.over_sampling import SMOTE
import shap

df =pd.read_csv('/content/creditcard.csv')
print('Shape:',df.shape)
print(df['Class'].value_counts())

df.info()

df.describe().T

sns.countplot(x='Class', data=df)
plt.title("Class Distribution (0 = Normal, 1 = Fraud)")
plt.show()

scaler = StandardScaler()
df['scaled_amount'] = scaler.fit_transform(df['Amount'].values.reshape(-1,1))
df['scaled_time'] = scaler.fit_transform(df['Time'].values.reshape(-1,1))

df.dropna(subset=['Class'], inplace=True)

X = df.drop('Class', axis=1)
y = df['Class']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

from imblearn.over_sampling import SMOTE

sm = SMOTE(random_state=42, k_neighbors=1)
X_train_res, y_train_res = sm.fit_resample(X_train, y_train)

rf_model = RandomForestClassifier(n_estimators=200, class_weight='balanced', random_state=42)
rf_model.fit(X_train_res, y_train_res)

y_pred = rf_model.predict(X_test)
y_prob = rf_model.predict_proba(X_test)[:,1]
print("Classification Report:\n", classification_report(y_test, y_pred))
print("ROC-AUC Score:", roc_auc_score(y_test, y_prob))

cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues")
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

RocCurveDisplay.from_estimator(rf_model, X_test, y_test)
plt.show()

importances = rf_model.feature_importances_
features = X.columns
feat_df = pd.DataFrame({'Feature':features, 'Importance':importances})
feat_df = feat_df.sort_values(by='Importance', ascending=False)

plt.figure(figsize=(10,6))
sns.barplot(x='Importance', y='Feature', data=feat_df)
plt.title("Feature Importance (Random Forest)")
plt.show()

def predict_transaction(model, input_data):

    if isinstance(input_data, dict):
        input_df = pd.DataFrame([input_data])
    else:
        input_df = pd.DataFrame([input_data], columns=X.columns)

    input_df = input_df[X.columns]

    prediction = model.predict(input_df)[0]
    probability = model.predict_proba(input_df)[0][1]

    result = "ðŸš¨ Fraud Detected!" if prediction == 1 else "âœ… Normal Transaction"
    print("\nPrediction Result:", result)
    print(f"Fraud Probability: {probability*100:.2f}%")
    return result, probability

sample = X_test.iloc[68].to_dict()
print("\n--- Example Transaction ---")
print(sample)

predict_transaction(rf_model, sample)

